#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace nguyenmanhthang
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Sales")]
	public partial class MyLoginDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPermissFunc(PermissFunc instance);
    partial void UpdatePermissFunc(PermissFunc instance);
    partial void DeletePermissFunc(PermissFunc instance);
    partial void InsertSalesUser(SalesUser instance);
    partial void UpdateSalesUser(SalesUser instance);
    partial void DeleteSalesUser(SalesUser instance);
    partial void InsertUserPermiss(UserPermiss instance);
    partial void UpdateUserPermiss(UserPermiss instance);
    partial void DeleteUserPermiss(UserPermiss instance);
    #endregion
		
		public MyLoginDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SalesConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyLoginDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLoginDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLoginDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLoginDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PermissFunc> PermissFuncs
		{
			get
			{
				return this.GetTable<PermissFunc>();
			}
		}
		
		public System.Data.Linq.Table<SalesUser> SalesUsers
		{
			get
			{
				return this.GetTable<SalesUser>();
			}
		}
		
		public System.Data.Linq.Table<UserPermiss> UserPermisses
		{
			get
			{
				return this.GetTable<UserPermiss>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissFunc")]
	public partial class PermissFunc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermisFuncID;
		
		private string _FunctionName;
		
		private EntitySet<UserPermiss> _UserPermisses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermisFuncIDChanging(int value);
    partial void OnPermisFuncIDChanged();
    partial void OnFunctionNameChanging(string value);
    partial void OnFunctionNameChanged();
    #endregion
		
		public PermissFunc()
		{
			this._UserPermisses = new EntitySet<UserPermiss>(new Action<UserPermiss>(this.attach_UserPermisses), new Action<UserPermiss>(this.detach_UserPermisses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermisFuncID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermisFuncID
		{
			get
			{
				return this._PermisFuncID;
			}
			set
			{
				if ((this._PermisFuncID != value))
				{
					this.OnPermisFuncIDChanging(value);
					this.SendPropertyChanging();
					this._PermisFuncID = value;
					this.SendPropertyChanged("PermisFuncID");
					this.OnPermisFuncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionName", DbType="NVarChar(500)")]
		public string FunctionName
		{
			get
			{
				return this._FunctionName;
			}
			set
			{
				if ((this._FunctionName != value))
				{
					this.OnFunctionNameChanging(value);
					this.SendPropertyChanging();
					this._FunctionName = value;
					this.SendPropertyChanged("FunctionName");
					this.OnFunctionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermissFunc_UserPermiss", Storage="_UserPermisses", ThisKey="PermisFuncID", OtherKey="PermisFuncID")]
		public EntitySet<UserPermiss> UserPermisses
		{
			get
			{
				return this._UserPermisses;
			}
			set
			{
				this._UserPermisses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermisses(UserPermiss entity)
		{
			this.SendPropertyChanging();
			entity.PermissFunc = this;
		}
		
		private void detach_UserPermisses(UserPermiss entity)
		{
			this.SendPropertyChanging();
			entity.PermissFunc = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesUser")]
	public partial class SalesUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Email;
		
		private EntitySet<UserPermiss> _UserPermisses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public SalesUser()
		{
			this._UserPermisses = new EntitySet<UserPermiss>(new Action<UserPermiss>(this.attach_UserPermisses), new Action<UserPermiss>(this.detach_UserPermisses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(100)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(500)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesUser_UserPermiss", Storage="_UserPermisses", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserPermiss> UserPermisses
		{
			get
			{
				return this._UserPermisses;
			}
			set
			{
				this._UserPermisses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermisses(UserPermiss entity)
		{
			this.SendPropertyChanging();
			entity.SalesUser = this;
		}
		
		private void detach_UserPermisses(UserPermiss entity)
		{
			this.SendPropertyChanging();
			entity.SalesUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPermiss")]
	public partial class UserPermiss : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _PermisFuncID;
		
		private System.Nullable<int> _PermissionNumber;
		
		private EntityRef<PermissFunc> _PermissFunc;
		
		private EntityRef<SalesUser> _SalesUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPermisFuncIDChanging(int value);
    partial void OnPermisFuncIDChanged();
    partial void OnPermissionNumberChanging(System.Nullable<int> value);
    partial void OnPermissionNumberChanged();
    #endregion
		
		public UserPermiss()
		{
			this._PermissFunc = default(EntityRef<PermissFunc>);
			this._SalesUser = default(EntityRef<SalesUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SalesUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermisFuncID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermisFuncID
		{
			get
			{
				return this._PermisFuncID;
			}
			set
			{
				if ((this._PermisFuncID != value))
				{
					if (this._PermissFunc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermisFuncIDChanging(value);
					this.SendPropertyChanging();
					this._PermisFuncID = value;
					this.SendPropertyChanged("PermisFuncID");
					this.OnPermisFuncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionNumber", DbType="Int")]
		public System.Nullable<int> PermissionNumber
		{
			get
			{
				return this._PermissionNumber;
			}
			set
			{
				if ((this._PermissionNumber != value))
				{
					this.OnPermissionNumberChanging(value);
					this.SendPropertyChanging();
					this._PermissionNumber = value;
					this.SendPropertyChanged("PermissionNumber");
					this.OnPermissionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermissFunc_UserPermiss", Storage="_PermissFunc", ThisKey="PermisFuncID", OtherKey="PermisFuncID", IsForeignKey=true)]
		public PermissFunc PermissFunc
		{
			get
			{
				return this._PermissFunc.Entity;
			}
			set
			{
				PermissFunc previousValue = this._PermissFunc.Entity;
				if (((previousValue != value) 
							|| (this._PermissFunc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermissFunc.Entity = null;
						previousValue.UserPermisses.Remove(this);
					}
					this._PermissFunc.Entity = value;
					if ((value != null))
					{
						value.UserPermisses.Add(this);
						this._PermisFuncID = value.PermisFuncID;
					}
					else
					{
						this._PermisFuncID = default(int);
					}
					this.SendPropertyChanged("PermissFunc");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesUser_UserPermiss", Storage="_SalesUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public SalesUser SalesUser
		{
			get
			{
				return this._SalesUser.Entity;
			}
			set
			{
				SalesUser previousValue = this._SalesUser.Entity;
				if (((previousValue != value) 
							|| (this._SalesUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesUser.Entity = null;
						previousValue.UserPermisses.Remove(this);
					}
					this._SalesUser.Entity = value;
					if ((value != null))
					{
						value.UserPermisses.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("SalesUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
